{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red83\green101\blue121;
\red155\green35\blue147;\red92\green38\blue153;\red50\green109\blue116;\red57\green0\blue160;\red196\green26\blue22;
\red36\green82\blue86;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c32401\c39745\c47507;
\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c35922\c14825\c60191;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c13924\c32052\c33684;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3     
\f1 \cf0 \

\f2\i \cf4 //    func renderer(_ renderer: SCNSceneRenderer, nodeFor anchor: ARAnchor) -> SCNNode? \{
\f1\i0 \cf0 \

\f2\i \cf4 //
\f1\i0 \cf0 \

\f2\i \cf4 //        // creating SCNNode that we are going to return
\f1\i0 \cf0 \

\f2\i \cf4 //        let ARAnchorNode = SCNNode()
\f1\i0 \cf0 \

\f2\i \cf4 //        let planeNode = SCNNode()
\f1\i0 \cf0 \

\f2\i \cf4 //        // converting the ARAnchor to an ARPlaneAnchor to get access to ARPlaneAnchor's extent and center values
\f1\i0 \cf0 \

\f2\i \cf4 //        let anchor = anchor as? ARPlaneAnchor
\f1\i0 \cf0 \

\f2\i \cf4 //        // creating plane geometry
\f1\i0 \cf0 \

\f2\i \cf4 //        planeNode.geometry = SCNPlane(width: CGFloat((anchor?.extent.x)!), height: CGFloat((anchor?.extent.z)!))
\f1\i0 \cf0 \

\f2\i \cf4 //        // transforming node
\f1\i0 \cf0 \

\f2\i \cf4 //        planeNode.position = SCNVector3((anchor?.center.x)!, 0, (anchor?.center.z)!)
\f1\i0 \cf0 \

\f2\i \cf4 //        planeNode.geometry?.firstMaterial?.diffuse.contents = UIImage(named: "Image01.png")
\f1\i0 \cf0 \

\f2\i \cf4 //        planeNode.eulerAngles = SCNVector3(-Float.pi/2,0,0)
\f1\i0 \cf0 \

\f2\i \cf4 //        planeNode.name = anchor?.identifier.uuidString
\f1\i0 \cf0 \

\f2\i \cf4 //        // adding plane node as child to ARAnchorNode due to mandatory ARKit conventions
\f1\i0 \cf0 \

\f2\i \cf4 //        ARAnchorNode.addChildNode(planeNode)
\f1\i0 \cf0 \

\f2\i \cf4 //
\f1\i0 \cf0 \

\f2\i \cf4 //        //returning ARAnchorNode (must return a node from this function to add it to the scene)
\f1\i0 \cf0 \

\f2\i \cf4 //        nodeArray.append(planeNode)
\f1\i0 \cf0 \

\f2\i \cf4 //        return ARAnchorNode
\f1\i0 \cf0 \

\f2\i \cf4 //    \}\
\
\
\

\f0\i0 \cf2   
\f2\i \cf4 // MARK: - Hit Test for Virtual Node
\f1\i0 \cf0 \
\

\f0 \cf2     
\f3\b \cf5 private
\f0\b0 \cf2  
\f3\b \cf5 func
\f0\b0 \cf2  virtualNodeHitTest(
\f3\b \cf5 _
\f0\b0 \cf2  pos: \cf6 CGPoint\cf2 ) -> \cf6 Bool\cf2  \{
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 guard
\f0\b0 \cf2  
\f3\b \cf5 let
\f0\b0 \cf2  anchors = \cf7 sceneView\cf2 .\cf6 session\cf2 .\cf6 currentFrame\cf2 ?.\cf6 anchors\cf2  
\f3\b \cf5 else
\f0\b0 \cf2  \{
\f3\b \cf5 return
\f0\b0 \cf2  
\f3\b \cf5 false
\f0\b0 \cf2 \}
\f1 \cf0 \

\f0 \cf2         
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 let
\f0\b0 \cf2  hitTestOptions = [\cf6 SCNHitTestOption\cf2 : 
\f3\b \cf5 Any
\f0\b0 \cf2 ]()
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 let
\f0\b0 \cf2  results: [\cf6 SCNHitTestResult\cf2 ] = \cf7 sceneView\cf2 .\cf8 hitTest\cf2 (pos, options: hitTestOptions)
\f1 \cf0 \

\f0 \cf2         
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 for
\f0\b0 \cf2  anchor 
\f3\b \cf5 in
\f0\b0 \cf2  anchors \{
\f1 \cf0 \

\f0 \cf2             \cf8 print\cf2 (\cf9 "anchors found"\cf2  , anchor)
\f1 \cf0 \
\

\f0 \cf2             
\f2\i \cf4 // a node corresponding to the anchor
\f1\i0 \cf0 \

\f0 \cf2             
\f3\b \cf5 guard
\f0\b0 \cf2  
\f3\b \cf5 let
\f0\b0 \cf2  node = \cf7 sceneView\cf2 .\cf8 node\cf2 (for: anchor) 
\f3\b \cf5 else
\f0\b0 \cf2  \{
\f3\b \cf5 continue
\f0\b0 \cf2 \}
\f1 \cf0 \

\f0 \cf2             
\f1 \cf0 \

\f0 \cf2             
\f2\i \cf4 // Search a virtual object node which has a hit node
\f1\i0 \cf0 \

\f0 \cf2             
\f3\b \cf5 guard
\f0\b0 \cf2  
\f3\b \cf5 let
\f0\b0 \cf2  hitVirtualNode = \cf10 searchHitVirtualObjectNode\cf2 (under: node, results: results) 
\f3\b \cf5 else
\f0\b0 \cf2  \{
\f3\b \cf5 continue
\f0\b0 \cf2 \}
\f1 \cf0 \

\f0 \cf2             
\f3\b \cf5 self
\f0\b0 \cf2 .\cf7 selectedNode\cf2  = hitVirtualNode
\f1 \cf0 \

\f0 \cf2             hitVirtualNode.\cf10 react\cf2 ()
\f1 \cf0 \

\f0 \cf2             \cf8 print\cf2 (\cf9 "virtualNodeHitTest  "\cf2 ,hitVirtualNode)
\f1 \cf0 \

\f0 \cf2             
\f3\b \cf5 return
\f0\b0 \cf2  
\f3\b \cf5 true
\f1\b0 \cf0 \

\f0 \cf2         \}
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 return
\f0\b0 \cf2  
\f3\b \cf5 false
\f1\b0 \cf0 \

\f0 \cf2     \}
\f1 \cf0 \

\f0 \cf2     
\f1 \cf0 \

\f0 \cf2     
\f2\i \cf4 // MARK: - Search for Virtual Node from found node on touch
\f1\i0 \cf0 \

\f0 \cf2     
\f3\b \cf5 private
\f0\b0 \cf2  
\f3\b \cf5 func
\f0\b0 \cf2  searchHitVirtualObjectNode(under node: \cf6 SCNNode\cf2 , results: [\cf6 SCNHitTestResult\cf2 ]) -> \cf7 VirtualNode\cf2 ? \{
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 for
\f0\b0 \cf2  child 
\f3\b \cf5 in
\f0\b0 \cf2  node.\cf6 childNodes\cf2  \{
\f1 \cf0 \

\f0 \cf2             
\f3\b \cf5 guard
\f0\b0 \cf2  
\f3\b \cf5 let
\f0\b0 \cf2  virtualNode = child 
\f3\b \cf5 as
\f0\b0 \cf2 ? \cf7 VirtualNode\cf2  
\f3\b \cf5 else
\f0\b0 \cf2  \{
\f3\b \cf5 continue
\f0\b0 \cf2 \}
\f1 \cf0 \

\f0 \cf2             \cf8 print\cf2 (\cf9 "searchHitVirtualObjectNode"\cf2 ,virtualNode)
\f1 \cf0 \

\f0 \cf2             
\f3\b \cf5 return
\f0\b0 \cf2  virtualNode
\f1 \cf0 \

\f2\i \cf4 //            for result in results \{
\f1\i0 \cf0 \

\f2\i \cf4 //                print("searchHitVirtualObjectNode results ", results)
\f1\i0 \cf0 \

\f2\i \cf4 //                for virtualChild in virtualNode.childNodes \{
\f1\i0 \cf0 \

\f2\i \cf4 //                    guard virtualChild == result.node else \{continue\}
\f1\i0 \cf0 \

\f2\i \cf4 //                    return virtualNode
\f1\i0 \cf0 \

\f2\i \cf4 //                \}
\f1\i0 \cf0 \

\f2\i \cf4 //            \}
\f1\i0 \cf0 \

\f0 \cf2         \}
\f1 \cf0 \

\f0 \cf2         
\f3\b \cf5 return
\f0\b0 \cf2  
\f3\b \cf5 nil
\f1\b0 \cf0 \

\f0 \cf2     \}\
\
\

\f2\i \cf4 //    // MARK: - Touch Handlers
\f1\i0 \cf0 \

\f2\i \cf4 //    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) \{
\f1\i0 \cf0 \

\f2\i \cf4 //        guard let touch = touches.first else \{return\}
\f1\i0 \cf0 \

\f2\i \cf4 //        let pos = touch.location(in: sceneView)
\f1\i0 \cf0 \

\f2\i \cf4 //        guard let hitTest = sceneView.hitTest(pos, types: .existingPlane).first else\{ return \}
\f1\i0 \cf0 \

\f2\i \cf4 //        guard let nodeToMove = findNodeAtLocation(at: pos) else \{return\}
\f1\i0 \cf0 \

\f2\i \cf4 //        //3. Move The Wall & pictureNode
\f1\i0 \cf0 \

\f2\i \cf4 //        nodeToMove.simdPosition.x = Float(hitTest.worldTransform.columns.3.x)
\f1\i0 \cf0 \

\f2\i \cf4 //        nodeToMove.simdPosition.z = Float(-hitTest.worldTransform.columns.3.y)
\f1\i0 \cf0 \

\f2\i \cf4 //        //planeHitTest(pos)
\f1\i0 \cf0 \

\f2\i \cf4 //    \}\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\i0 \cf0 \cb3 \
\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f2\i \cf4 \cb3 //    // MARK: - Find Node on PLane Hit test
\f1\i0 \cf0 \

\f2\i \cf4 //    private func planeHitTest(_ pos: CGPoint) \{
\f1\i0 \cf0 \

\f2\i \cf4 //        let results = sceneView.hitTest(pos, types: .existingPlaneUsingExtent)
\f1\i0 \cf0 \

\f2\i \cf4 //
\f1\i0 \cf0 \

\f2\i \cf4 //        // closest hit anchor
\f1\i0 \cf0 \

\f2\i \cf4 //        guard let anchor = results.first?.anchor else \{return\}
\f1\i0 \cf0 \

\f2\i \cf4 //
\f1\i0 \cf0 \

\f2\i \cf4 //        // corresponding node
\f1\i0 \cf0 \

\f2\i \cf4 //        guard let node = sceneView.node(for: anchor) else \{return\}
\f1\i0 \cf0 \

\f2\i \cf4 //        print("planeHitTest  ",node.childNodes)
\f1\i0 \cf0 \

\f2\i \cf4 //
\f1\i0 \cf0 \

\f2\i \cf4 //        if node.isKind(of: VirtualNode.self)
\f1\i0 \cf0 \

\f2\i \cf4 //        \{
\f1\i0 \cf0 \

\f2\i \cf4 //            let virtualNode = node as? VirtualNode
\f1\i0 \cf0 \

\f2\i \cf4 //            virtualNode?.react()
\f1\i0 \cf0 \

\f2\i \cf4 //            self.selectedNode = virtualNode
\f1\i0 \cf0 \

\f2\i \cf4 //        \}
\f1\i0 \cf0 \

\f2\i \cf4 //        else \{
\f1\i0 \cf0 \

\f2\i \cf4 //        // Search a child node which has a plane geometry
\f1\i0 \cf0 \

\f2\i \cf4 //        for child in node.childNodes \{
\f1\i0 \cf0 \

\f2\i \cf4 //            guard let virtualNode = child as? VirtualNode else \{continue\}
\f1\i0 \cf0 \

\f2\i \cf4 //            print("planeHitTest",virtualNode)
\f1\i0 \cf0 \

\f2\i \cf4 //            virtualNode.react()
\f1\i0 \cf0 \

\f2\i \cf4 //            self.selectedNode = virtualNode
\f1\i0 \cf0 \

\f2\i \cf4 //            break
\f1\i0 \cf0 \

\f2\i \cf4 //        \}
\f1\i0 \cf0 \

\f2\i \cf4 //        \}
\f1\i0 \cf0 \

\f2\i \cf4 //    \}
\f1\i0 \cf0 \

\f0 \cf2     \
\
\
\
 required for future use may be
\f1 \cf0 \

\f0 \cf2        
\f2\i \cf4 // let isHit = virtualNodeHitTest(pos)
\f1\i0 \cf0 \

\f0 \cf2         
\f1 \cf0 \

\f0 \cf2        
\f2\i \cf4 // if !isHit \{
\f1\i0 \cf0 \

\f0 \cf2             \cf10 planeHitTest\cf2 (pos)
\f1 \cf0 \

\f0 \cf2         
\f2\i \cf4 //\}}